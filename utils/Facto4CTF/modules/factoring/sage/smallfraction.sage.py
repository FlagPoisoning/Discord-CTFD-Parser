

# This file was *autogenerated* from the file /mnt/d/Bureau/Arthur/github/Discord_CTFD/utils/Facto4CTF/modules/factoring/sage/smallfraction.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0 = Integer(0)#!/usr/bin/env sage

import sys


def factor(n):
    depth = _sage_const_50 
    x = PolynomialRing(Zmod(n), "x").gen()

    for den in IntegerRange(_sage_const_2 , depth + _sage_const_1 ):
        for num in IntegerRange(_sage_const_1 , den):
            if gcd(num, den) == _sage_const_1 :
                r = den / num
                phint = isqrt(n * r)
                f = x - phint
                sr = f.small_roots(beta=_sage_const_0p5 )

                if len(sr) > _sage_const_0 :
                    p = phint - sr[_sage_const_0 ]
                    p = p.lift()
                    if n % p == _sage_const_0 :
                        return p


try:
    n = int(sys.argv[_sage_const_1 ])
    p = factor(n)
    if p is None:
        print(_sage_const_1 )
    else:
        print(p)
except:
    print(_sage_const_1 )

